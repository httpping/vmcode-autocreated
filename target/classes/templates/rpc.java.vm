package ${cfg.rpc_package};

#if(${activeRecord})
import java.io.Serializable;

import ${package.Service}.I${entity}Service;
import ${superServiceClassPackage};


#end


import cn.vpclub.moses.core.enums.ReturnCodeEnum;
import cn.vpclub.moses.core.model.response.BaseResponse;
import cn.vpclub.moses.utils.grpc.proto.TypeProto;
import com.baomidou.mybatisplus.plugins.Page;
import org.apache.commons.collections.CollectionUtils;
import cn.vpclub.spring.boot.grpc.annotations.GRpcService;

import ${package.Entity}.${entity};
import ${cfg.root_package}.model.request.${entity}PageParam;
import ${package.Service}.I${entity}Service;

import ${cfg.rpc_proto_package}.${entity}Proto;
import ${cfg.rpc_proto_package}.${entity}Proto.*;
import ${cfg.rpc_proto_package}.${entity}ServiceGrpc;


import io.grpc.stub.StreamObserver;
import lombok.Data;
import lombok.experimental.Accessors;
import lombok.extern.slf4j.Slf4j;

import static cn.vpclub.moses.utils.grpc.GRpcMessageConverter.fromGRpcMessage;
import static cn.vpclub.moses.utils.grpc.GRpcMessageConverter.toGRpcMessage;


/**
 * <p>
 * $!{table.comment}
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${entityLombokModel})
@Data
@Accessors(chain = true)
@Slf4j
#end
@GRpcService
public class ${entity}Rpc extends ${entity}ServiceGrpc.${entity}ServiceImplBase   {

    private I${entity}Service service;

    public ${entity}Rpc(I${entity}Service service) {
        this.service = service;
    }

    @Override
    public void add(${entity}Proto.${entity}DTO request, StreamObserver<${entity}Proto.${entity}Response> responseObserver) {
        ${entity} model = (${entity}) fromGRpcMessage(request, ${entity}.class);
        BaseResponse baseResponse = service.add(model);
        ${entity}Response response = (${entity}Response) toGRpcMessage(baseResponse, ${entity}Response.newBuilder());
        responseObserver.onNext(response);
        responseObserver.onCompleted();
    }

    @Override
    public void query(${entity}Proto.${entity}DTO request, StreamObserver<${entity}Proto.${entity}Response> responseObserver) {
        ${entity} model = (${entity}) fromGRpcMessage(request, ${entity}.class);
        BaseResponse baseResponse = service.query(model);
        ${entity}Response response = (${entity}Response) toGRpcMessage(baseResponse, ${entity}Response.newBuilder());
        responseObserver.onNext(response);
        responseObserver.onCompleted();
    }

    @Override
    public void update(${entity}Proto.${entity}DTO request, StreamObserver<${entity}Proto.${entity}Response> responseObserver) {
        ${entity} model = (${entity}) fromGRpcMessage(request, ${entity}.class);
        BaseResponse baseResponse = service.update(model);
        ${entity}Response response = (${entity}Response) toGRpcMessage(baseResponse, ${entity}Response.newBuilder());
        responseObserver.onNext(response);
        responseObserver.onCompleted();
    }

    @Override
    public void delete(${entity}Proto.${entity}DTO request, StreamObserver<${entity}Proto.${entity}Response> responseObserver) {
        //业务操作
        ${entity} model = (${entity}) fromGRpcMessage(request, ${entity}.class);
        BaseResponse baseResponse = service.delete(model);
        ${entity}Response response = (${entity}Response) toGRpcMessage(baseResponse, ${entity}Response.newBuilder());
        responseObserver.onNext(response);
        responseObserver.onCompleted();
    }

    @Override
    public void page(${entity}Proto.${entity}Request request, StreamObserver<${entity}Proto.${entity}PageResponse> responseObserver) {
        ${entity}PageResponse response;
        ${entity}PageParam pageParam = (${entity}PageParam) fromGRpcMessage(request, ${entity}PageParam.class);

        Page<${entity}> selectPage = service.page(pageParam);
        response = (${entity}PageResponse) toGRpcMessage(selectPage, ${entity}PageResponse.newBuilder());
        //back
        TypeProto.Integer.Builder returnCode = TypeProto.Integer.newBuilder();
        String message = "";
        if (CollectionUtils.isNotEmpty(selectPage.getRecords())) {
            returnCode = returnCode.setValue(ReturnCodeEnum.CODE_1000.getCode());
            message=ReturnCodeEnum.CODE_1000.getValue();
        }
        else {
            returnCode = returnCode.setValue(ReturnCodeEnum.CODE_1002.getCode());
            message=ReturnCodeEnum.CODE_1002.getValue();
        }
        response = response.toBuilder().setReturnCode(returnCode.build().getValue())
                .setMessage(message).build();
        log.debug("page select back : {}",response);
        responseObserver.onNext(response);
        responseObserver.onCompleted();
    }
	
}
