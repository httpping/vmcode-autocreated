package ${cfg.rpc_package};


import cn.vpclub.moses.core.enums.ReturnCodeEnum;
import cn.vpclub.moses.core.model.response.BaseResponse;
import cn.vpclub.moses.utils.grpc.proto.TypeProto;
import com.baomidou.mybatisplus.plugins.Page;
import org.apache.commons.collections.CollectionUtils;
import cn.vpclub.moses.core.model.response.PageResponse;

import ${package.Entity}.${entity};
import ${cfg.root_package}.model.request.${entity}PageParam;
##import ${package.Service}.I${entity}Service;

##import ${cfg.rpc_package}.${entity}Proto;
import ${cfg.rpc_package}.${entity}Proto.*;

import ${cfg.rpc_package}.${entity}ServiceGrpc.*;


import lombok.Data;
import lombok.experimental.Accessors;
import lombok.extern.slf4j.Slf4j;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;

import static cn.vpclub.moses.utils.grpc.GRpcMessageConverter.fromGRpcMessage;
import static cn.vpclub.moses.utils.grpc.GRpcMessageConverter.toGRpcMessage;


/**
 * <p>
 * $!{table.comment}
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${entityLombokModel})
@Data
@Slf4j
@AllArgsConstructor
@Accessors(chain = true)
#end
@Service
public class ${entity}RpcService   {

    private ${entity}ServiceBlockingStub blockingStub;

    public BaseResponse add(${entity} request) {
        ${entity}DTO dto = (${entity}DTO) toGRpcMessage(request, ${entity}DTO.newBuilder());
        ${entity}Response response = blockingStub.add(dto);
        return (BaseResponse) fromGRpcMessage(response, BaseResponse.class,${entity}.class);
    }

    public BaseResponse update(${entity} request) {
        ${entity}DTO dto = (${entity}DTO) toGRpcMessage(request, ${entity}DTO.newBuilder());
        ${entity}Response response = blockingStub.update(dto);
        return (BaseResponse) fromGRpcMessage(response, BaseResponse.class,${entity}.class);
    }

    public BaseResponse query(${entity} request) {
        ${entity}DTO dto = (${entity}DTO) toGRpcMessage(request, ${entity}DTO.newBuilder());
        ${entity}Response response = blockingStub.query(dto);
        return (BaseResponse) fromGRpcMessage(response, BaseResponse.class,${entity}.class);
    }

    public BaseResponse delete(${entity} request) {
        ${entity}DTO dto = (${entity}DTO) toGRpcMessage(request, ${entity}DTO.newBuilder());
        ${entity}Response response = blockingStub.delete(dto);
        return (BaseResponse) fromGRpcMessage(response, BaseResponse.class,${entity}.class);
    }

    public PageResponse page(${entity}PageParam request) {
        ${entity}Proto.${entity}Request dto = (${entity}Proto.${entity}Request) toGRpcMessage(request, ${entity}Proto.${entity}Request.newBuilder());
        ${entity}PageResponse listResponse = blockingStub.page(dto);
        return (PageResponse) fromGRpcMessage(listResponse, PageResponse.class,${entity}.class);
    }
}
